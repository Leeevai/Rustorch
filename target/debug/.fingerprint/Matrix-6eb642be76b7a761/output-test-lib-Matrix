{"$message_type":"diagnostic","message":"unused import: `std::sync::Arc`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"crates\\Matrix\\src\\matrix.rs","byte_start":63,"byte_end":77,"line_start":2,"line_end":2,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"use std::sync::Arc;","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"crates\\Matrix\\src\\matrix.rs","byte_start":59,"byte_end":80,"line_start":2,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use std::sync::Arc;","highlight_start":1,"highlight_end":20},{"text":"use std::thread;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `std::sync::Arc`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcrates\\Matrix\\src\\matrix.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::sync::Arc;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `std::thread`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"crates\\Matrix\\src\\matrix.rs","byte_start":84,"byte_end":95,"line_start":3,"line_end":3,"column_start":5,"column_end":16,"is_primary":true,"text":[{"text":"use std::thread;","highlight_start":5,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"crates\\Matrix\\src\\matrix.rs","byte_start":80,"byte_end":98,"line_start":3,"line_end":4,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use std::thread;","highlight_start":1,"highlight_end":17},{"text":"use rayon::prelude::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `std::thread`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcrates\\Matrix\\src\\matrix.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::thread;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `matrix_multiply` exists for struct `Matrix<T>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"crates\\Matrix\\src\\matrix.rs","byte_start":17155,"byte_end":17170,"line_start":553,"line_end":553,"column_start":14,"column_end":29,"is_primary":true,"text":[{"text":"        self.matrix_multiply(&other)","highlight_start":14,"highlight_end":29}],"label":"method cannot be called on `Matrix<T>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates\\Matrix\\src\\matrix.rs","byte_start":197,"byte_end":217,"line_start":8,"line_end":8,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"pub struct Matrix<T> {","highlight_start":1,"highlight_end":21}],"label":"method `matrix_multiply` not found for this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"trait bound `<T as Sub>::Output = T` was not satisfied","code":null,"level":"note","spans":[{"file_name":"crates\\Matrix\\src\\matrix.rs","byte_start":6827,"byte_end":6837,"line_start":243,"line_end":243,"column_start":89,"column_end":99,"is_primary":true,"text":[{"text":"    T: Default + Copy + Clone + Send + Sync + std::ops::Add<Output = T> + std::ops::Sub<Output = T> + std::ops::Mul<Output = T> + PartialEq,","highlight_start":89,"highlight_end":99}],"label":"unsatisfied trait bound introduced here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates\\Matrix\\src\\matrix.rs","byte_start":6721,"byte_end":6730,"line_start":241,"line_end":241,"column_start":9,"column_end":18,"is_primary":false,"text":[{"text":"impl<T> Matrix<T>","highlight_start":9,"highlight_end":18}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the method `matrix_multiply` exists for struct `Matrix<T>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcrates\\Matrix\\src\\matrix.rs:553:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m8\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Matrix<T> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mmethod `matrix_multiply` not found for this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m553\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.matrix_multiply(&other)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `Matrix<T>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: trait bound `<T as Sub>::Output = T` was not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcrates\\Matrix\\src\\matrix.rs:243:89\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m241\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<T> Matrix<T>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m242\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m243\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Default + Copy + Clone + Send + Sync + std::ops::Add<Output = T> + std::ops::Sub<Output = T> + std::ops::Mul<Output = T> + PartialEq,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10munsatisfied trait bound introduced here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"arguments to this function are incorrect","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"crates\\Matrix\\src\\lib.rs","byte_start":15402,"byte_end":15406,"line_start":447,"line_end":447,"column_start":47,"column_end":51,"is_primary":false,"text":[{"text":"        let mat_concurrent = Matrix::from_vec(size, size, data.clone()).unwrap();","highlight_start":47,"highlight_end":51}],"label":"expected `usize`, found `i32`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates\\Matrix\\src\\lib.rs","byte_start":15408,"byte_end":15412,"line_start":447,"line_end":447,"column_start":53,"column_end":57,"is_primary":false,"text":[{"text":"        let mat_concurrent = Matrix::from_vec(size, size, data.clone()).unwrap();","highlight_start":53,"highlight_end":57}],"label":"expected `usize`, found `i32`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates\\Matrix\\src\\lib.rs","byte_start":15385,"byte_end":15401,"line_start":447,"line_end":447,"column_start":30,"column_end":46,"is_primary":true,"text":[{"text":"        let mat_concurrent = Matrix::from_vec(size, size, data.clone()).unwrap();","highlight_start":30,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"crates\\Matrix\\src\\matrix.rs","byte_start":1082,"byte_end":1093,"line_start":43,"line_end":43,"column_start":21,"column_end":32,"is_primary":false,"text":[{"text":"    pub fn from_vec(rows: usize, cols: usize, data: Vec<T>) -> MatrixResult<Matrix<T>> {","highlight_start":21,"highlight_end":32}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates\\Matrix\\src\\matrix.rs","byte_start":1095,"byte_end":1106,"line_start":43,"line_end":43,"column_start":34,"column_end":45,"is_primary":false,"text":[{"text":"    pub fn from_vec(rows: usize, cols: usize, data: Vec<T>) -> MatrixResult<Matrix<T>> {","highlight_start":34,"highlight_end":45}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates\\Matrix\\src\\matrix.rs","byte_start":1073,"byte_end":1081,"line_start":43,"line_end":43,"column_start":12,"column_end":20,"is_primary":true,"text":[{"text":"    pub fn from_vec(rows: usize, cols: usize, data: Vec<T>) -> MatrixResult<Matrix<T>> {","highlight_start":12,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can convert an `i32` to a `usize` and panic if the converted value doesn't fit","code":null,"level":"help","spans":[{"file_name":"crates\\Matrix\\src\\lib.rs","byte_start":15406,"byte_end":15406,"line_start":447,"line_end":447,"column_start":51,"column_end":51,"is_primary":true,"text":[{"text":"        let mat_concurrent = Matrix::from_vec(size, size, data.clone()).unwrap();","highlight_start":51,"highlight_end":51}],"label":null,"suggested_replacement":".try_into().unwrap()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null},{"message":"you can convert an `i32` to a `usize` and panic if the converted value doesn't fit","code":null,"level":"help","spans":[{"file_name":"crates\\Matrix\\src\\lib.rs","byte_start":15412,"byte_end":15412,"line_start":447,"line_end":447,"column_start":57,"column_end":57,"is_primary":true,"text":[{"text":"        let mat_concurrent = Matrix::from_vec(size, size, data.clone()).unwrap();","highlight_start":57,"highlight_end":57}],"label":null,"suggested_replacement":".try_into().unwrap()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: arguments to this function are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcrates\\Matrix\\src\\lib.rs:447:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m447\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mat_concurrent = Matrix::from_vec(size, size, data.clone()).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected `usize`, found `i32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected `usize`, found `i32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcrates\\Matrix\\src\\matrix.rs:43:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m43\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_vec(rows: usize, cols: usize, data: Vec<T>) -> MatrixResult<Matrix<T>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can convert an `i32` to a `usize` and panic if the converted value doesn't fit\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m447\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        let mat_concurrent = Matrix::from_vec(size\u001b[0m\u001b[0m\u001b[38;5;10m.try_into().unwrap()\u001b[0m\u001b[0m, size, data.clone()).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can convert an `i32` to a `usize` and panic if the converted value doesn't fit\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m447\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        let mat_concurrent = Matrix::from_vec(size, size\u001b[0m\u001b[0m\u001b[38;5;10m.try_into().unwrap()\u001b[0m\u001b[0m, data.clone()).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"arguments to this function are incorrect","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"crates\\Matrix\\src\\lib.rs","byte_start":15496,"byte_end":15500,"line_start":448,"line_end":448,"column_start":58,"column_end":62,"is_primary":false,"text":[{"text":"        let mat_sequential = Matrix::from_vec_sequential(size, size, data).unwrap();","highlight_start":58,"highlight_end":62}],"label":"expected `usize`, found `i32`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates\\Matrix\\src\\lib.rs","byte_start":15502,"byte_end":15506,"line_start":448,"line_end":448,"column_start":64,"column_end":68,"is_primary":false,"text":[{"text":"        let mat_sequential = Matrix::from_vec_sequential(size, size, data).unwrap();","highlight_start":64,"highlight_end":68}],"label":"expected `usize`, found `i32`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates\\Matrix\\src\\lib.rs","byte_start":15468,"byte_end":15495,"line_start":448,"line_end":448,"column_start":30,"column_end":57,"is_primary":true,"text":[{"text":"        let mat_sequential = Matrix::from_vec_sequential(size, size, data).unwrap();","highlight_start":30,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"crates\\Matrix\\src\\matrix.rs","byte_start":1652,"byte_end":1663,"line_start":61,"line_end":61,"column_start":32,"column_end":43,"is_primary":false,"text":[{"text":"    pub fn from_vec_sequential(rows: usize, cols: usize, data: Vec<T>) -> MatrixResult<Matrix<T>> {","highlight_start":32,"highlight_end":43}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates\\Matrix\\src\\matrix.rs","byte_start":1665,"byte_end":1676,"line_start":61,"line_end":61,"column_start":45,"column_end":56,"is_primary":false,"text":[{"text":"    pub fn from_vec_sequential(rows: usize, cols: usize, data: Vec<T>) -> MatrixResult<Matrix<T>> {","highlight_start":45,"highlight_end":56}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates\\Matrix\\src\\matrix.rs","byte_start":1632,"byte_end":1651,"line_start":61,"line_end":61,"column_start":12,"column_end":31,"is_primary":true,"text":[{"text":"    pub fn from_vec_sequential(rows: usize, cols: usize, data: Vec<T>) -> MatrixResult<Matrix<T>> {","highlight_start":12,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you can convert an `i32` to a `usize` and panic if the converted value doesn't fit","code":null,"level":"help","spans":[{"file_name":"crates\\Matrix\\src\\lib.rs","byte_start":15500,"byte_end":15500,"line_start":448,"line_end":448,"column_start":62,"column_end":62,"is_primary":true,"text":[{"text":"        let mat_sequential = Matrix::from_vec_sequential(size, size, data).unwrap();","highlight_start":62,"highlight_end":62}],"label":null,"suggested_replacement":".try_into().unwrap()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null},{"message":"you can convert an `i32` to a `usize` and panic if the converted value doesn't fit","code":null,"level":"help","spans":[{"file_name":"crates\\Matrix\\src\\lib.rs","byte_start":15506,"byte_end":15506,"line_start":448,"line_end":448,"column_start":68,"column_end":68,"is_primary":true,"text":[{"text":"        let mat_sequential = Matrix::from_vec_sequential(size, size, data).unwrap();","highlight_start":68,"highlight_end":68}],"label":null,"suggested_replacement":".try_into().unwrap()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: arguments to this function are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcrates\\Matrix\\src\\lib.rs:448:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m448\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mat_sequential = Matrix::from_vec_sequential(size, size, data).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected `usize`, found `i32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected `usize`, found `i32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcrates\\Matrix\\src\\matrix.rs:61:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m61\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_vec_sequential(rows: usize, cols: usize, data: Vec<T>) -> MatrixResult<Matrix<T>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can convert an `i32` to a `usize` and panic if the converted value doesn't fit\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m448\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        let mat_sequential = Matrix::from_vec_sequential(size\u001b[0m\u001b[0m\u001b[38;5;10m.try_into().unwrap()\u001b[0m\u001b[0m, size, data).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can convert an `i32` to a `usize` and panic if the converted value doesn't fit\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m448\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        let mat_sequential = Matrix::from_vec_sequential(size, size\u001b[0m\u001b[0m\u001b[38;5;10m.try_into().unwrap()\u001b[0m\u001b[0m, data).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                    \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"crates\\Matrix\\src\\lib.rs","byte_start":16346,"byte_end":16352,"line_start":468,"line_end":468,"column_start":45,"column_end":51,"is_primary":true,"text":[{"text":"                assert_eq!(trans_concurrent[(i, j)], trans_sequential[(i, j)]);","highlight_start":45,"highlight_end":51}],"label":"expected `(usize, usize)`, found `(i32, i32)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected tuple `(usize, usize)`\n   found tuple `(i32, i32)`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcrates\\Matrix\\src\\lib.rs:468:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m468\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                assert_eq!(trans_concurrent[(i, j)], trans_sequential[(i, j)]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `(usize, usize)`, found `(i32, i32)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected tuple `(\u001b[0m\u001b[0m\u001b[1m\u001b[35musize\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35musize\u001b[0m\u001b[0m)`\u001b[0m\n\u001b[0m               found tuple `(\u001b[0m\u001b[0m\u001b[1m\u001b[35mi32\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mi32\u001b[0m\u001b[0m)`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"crates\\Matrix\\src\\lib.rs","byte_start":16372,"byte_end":16378,"line_start":468,"line_end":468,"column_start":71,"column_end":77,"is_primary":true,"text":[{"text":"                assert_eq!(trans_concurrent[(i, j)], trans_sequential[(i, j)]);","highlight_start":71,"highlight_end":77}],"label":"expected `(usize, usize)`, found `(i32, i32)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected tuple `(usize, usize)`\n   found tuple `(i32, i32)`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcrates\\Matrix\\src\\lib.rs:468:71\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m468\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                assert_eq!(trans_concurrent[(i, j)], trans_sequential[(i, j)]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `(usize, usize)`, found `(i32, i32)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected tuple `(\u001b[0m\u001b[0m\u001b[1m\u001b[35musize\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35musize\u001b[0m\u001b[0m)`\u001b[0m\n\u001b[0m               found tuple `(\u001b[0m\u001b[0m\u001b[1m\u001b[35mi32\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mi32\u001b[0m\u001b[0m)`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 5 previous errors; 2 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 5 previous errors; 2 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0308, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0308, E0599.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0308`.\u001b[0m\n"}
